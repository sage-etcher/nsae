
#if 0
z80
  in stat1_reg
  in stat2_reg
  out ctrl_reg

ctrl_reg
  in z80
  out keyboard
  out video
  out disk
  out io_boards
  out speaker

stat1_reg
  in keyboard
  in video
  in disk
  in io_boards
  out z80

stat2_reg
  in keyboard
  in disk
  in cmd_ack
  out z80

keyboard
  in ctrl_reg
  out stat1_reg
  out stat2_reg

video
  in ctrl_reg
  out stat1_reg

disk
  in ctrl_reg
  out stat1_reg
  out stat2_reg

io_boards
  in ctrl_reg
  out stat1_reg

speaker
  in ctrl_reg
#endif

typedef struct {
    Z80_STATE state;

    void reset();
    uint32_t step();
    uint32_t run(uint32_t cycles);
} cpu_t;

typedef struct {
    bool overflow;
    bool data;
    bool mi;
    bool nmi;
    uint8_t buf[7];
    uint8_t buf_cnt;

    uint8_t decode_key(uint8_t key);
    void push(uint8_t key);
    uint8_t get_lsb();
    uint8_t get_msb();
} keyboard_t;

typedef struct {
    bool blank;
    bool vrefresh;
    uint8_t scroll_reg;
    const uint8_t *p_vram;

    void draw();
} video_t;

typedef struct {
    char *filename;
    uint8_t data[2][512*2*10*35];
    size_t data_cnt[2];

    bool powered;
    bool motor_enabled;

    bool disk; /* 0 or 1 for disk A:B */
    bool disk_side; /* 0 or 1 for top:bottom */
    uint8_t sector[2];
    uint8_t track[2];
    bool step_pulse;
    bool step_direction;
    bool hard_ro;
    bool mode_read;
    bool mode_write;

    void start_motor();
    void stop_motor();

    uint8_t step();
    uint8_t get_sector();

    uint8_t read_sync1();
    uint8_t read_sync2();
    uint8_t read();
    void write(uint8_t data);

    int load_fdisk_file(uint8_t disk, char *filename);
    int save_fdisk_file(uint8_t disk, char *filename);
} fdisk_t;

typedef struct {
} sio_t;

typedef struct {
} pio_t;

typedef struct {
} hdc_t;

typedef enum {
    IO_NONE,
    IO_SIO,
    IO_PIO,
    IO_HDC,
} iotype_t;

typedef struct {
    iotype_t slot[6];
    union {
        sio_t sio;
        pio_t pio;
        hdc_t hdc;
    } m[6];

    uint8_t get_board_id(uint8_t slot_num);
} io_boards_t;

typedef struct {
    void beep();
} speaker_t;

#define RAM_MAX 0x15800
typedef struct {
    uint8_t ram[RAM_MAX];

    uint8_t read(uint32_t addr);
    void write(uint32_t addr, uint8_t data);
} memory_t;

typedef struct {
    uint8_t memory_t *raw_mem;
    uint8_t slots[4];
    uint32_t bases[16];
    uint16_t masks[16];

    void init_page (uint8_t page_num, uint32_t base, uint16_t mask);
    void load_page (uint8_t slot_num, uint8_t page_num);
    uint8_t *deref (uint16_t addr);

    uint8_t read(uint16_t addr);
    void write(uint16_t addr, uint8_t data);
} mmu_t;

typedef struct {
    cpu_t cpu;
    crt_t crt;
    fdc_t fdc;
    io_t  io;
    kb_t  kb;
    mmu_t mmu;
    ram_t ram;
    speaker_t speaker;

    bool hw_interupt;

    bool cmd_ack;
    uint8_t ctrl_reg;
    uint8_t stat1_reg;
    uint8_t stat2_reg;

    void out(uint8_t port, uint8_t data)
    uint8_t in(uint8_t port)
} adv_t;

typedef struct {
    adv_t adv;

    int width;
    int height;
    int max_fps;

    bool pause;
    bool exit;
} nsae_t;



